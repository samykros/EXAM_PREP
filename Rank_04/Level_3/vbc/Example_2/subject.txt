Assignment name  : vbc
Expected files   : *.c *.h
Allowed functions: malloc, calloc, realloc, free, printf, isdigit, write
--------------------------------------------------------------------------------

Write a program that will print the result of a math expression given as
argument.
You must handle the operations + * and the parenthesis.
You don't have to handle whitespaces in the expression.
All the values in the expression will be between 0 and 9 included.
In case of unexpected symbol, you will print "Unexpected token '%c'\n" and exit with the code 1 (if the
symbol is the end of input you will print: "Unexpected end of input\n").
This rule also apply in case you find an un-expected '(' or ')'.
In case of a syscall failure you will just exit with the code 1.

You will find in this directory the beginning of the code you need to write.

For example this should work:
$> ./vbc '1' | cat -e
1$
$> ./vbc '2+3' | cat -e
5$
$> ./vbc '3*4+5' | cat -e
17$
$> ./vbc '3+4*5' | cat -e
23$
$> ./vbc '(3+4)*5' | cat -e
35$
$> ./vbc '(((((2+2)*2+2)*2+2)*2+2)*2+2)*2'
188$
$> ./vbc '1+'
Unexpected end of input$
$> ./vbc '1+2)'
Unexpected token ')'$



Probably something not as detailed as this but from what I have gatrhered from people
Question: Calculator with Parentheses Parsing
Objective:
Write a program in C that evaluates arithmetic expressions with:

Numbers (single-digit only, e.g., 2, 3).
Operators + and *.
Parentheses ( ).
Requirements:
Input: A single arithmetic expression as a string (e.g., "2*(3+4)").
Output: Print the result of the evaluated expression (e.g., 14 for "2*(3+4)").
Handle:
Operator precedence (* has higher precedence than +).
Parentheses for overriding precedence.
Constraints:
Only single-digit numbers are allowed (e.g., 1, 2, not 12).
Input is guaranteed to be well-formed (no malformed expressions like 2++3).
Example Walkthrough:
Input: 2*(3+4)
Abstract Syntax Tree (AST):
markdown
Copy code
      *
    /   \
   2     +
        /   \
       3     4
Evaluation:
3 + 4 = 7
2 * 7 = 14
Output: 14
Key Tasks:
Parse the input string into an Abstract Syntax Tree (AST):
Numbers are leaf nodes.
Operators (+, *) are internal nodes.
Evaluate the AST recursively:
For +, add the results of left and right subtrees.
For *, multiply the results of left and right subtrees.